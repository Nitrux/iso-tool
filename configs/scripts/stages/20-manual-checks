#!/usr/bin/env bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2023-2024> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                              #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################

set -eu


# -- Functions.

check_ownership() {
  local file_to_check=$1
  echo -e "\nChecking ownership of $file_to_check..."

  if [ -e "$file_to_check" ]; then
    local owner
    local group
    owner=$(stat -c "%U" "$file_to_check")
    group=$(stat -c "%G" "$file_to_check")
    echo "The file is owned by: $owner (Group: $group)"
  else
    echo "File $file_to_check does not exist."
  fi
}

check_file_contents() {
  local file=$1
  if [ -f "$file" ]; then
    echo "Contents of $file:"
    echo "=========================="
    cat "$file"
    echo "=========================="
  else
    echo "Error: File '$file' not found."
  fi
}

check_initramfs_size() {
  local initramfs_file
  initramfs_file="/boot/initrd.img-$(uname -r)"

  if [ -f "$initramfs_file" ]; then
    echo "Initramfs file: $initramfs_file"
    echo "Initramfs size:"
    du -h --apparent-size "$initramfs_file" | awk '{printf "%.1fM\n", $1}'

    echo "15 largest files in initramfs:"
    lsinitramfs -l "$initramfs_file" | sort -rh -k5 | head -n 15 | awk '{printf "%.1fM %s %s\n", $5/1024/1024, $3, $NF}'
  else
    echo "Error: Initramfs file '$initramfs_file' not found."
  fi
}

check_files() {
  local files=("$@")
  echo "Checking existence of files..."
  for file in "${files[@]}"; do
    if [ -e "$file" ]; then
      echo "File $file exists."
    else
      echo "File $file does not exist."
    fi
  done
}

check_symlinks() {
  local links=("$@")
  echo -e "\nChecking symbolic link targets..."
  for link in "${links[@]}"; do
    local target
    target=$(readlink -f "$link" || true)
    if [ -n "$target" ]; then
      echo "Link $link points to: $target"
    else
      echo "Link $link does not exist or is not a symbolic link."
    fi
  done
}

check_directories() {
  local directories=("$@")
  echo -e "\nChecking existence of directories..."
  if ! command -v tree &> /dev/null; then
    echo "Error: 'tree' command not found. Please install 'tree' to list directory contents."
    return 1
  fi
  for directory in "${directories[@]}"; do
    if [ -d "$directory" ]; then
      echo "Directory $directory exists. Contents:"
      tree -L 2 "$directory"
    else
      echo "Directory $directory does not exist."
    fi
  done
}


# -- Perform manual checks.

files_to_check=(
  "/etc/rc.local"
  "/installed_pkgs_end.txt"
  "/installed_pkgs_start.txt"
  "/usr/lib/os-release"
  "/etc/lsb-release"
)

links_to_check=(
  "/vmlinuz"
  "/initrd.img"
  "/sbin/init"
  "/bin/sh"
  "/etc/os-release"
)

check_files "${files_to_check[@]}"
check_symlinks "${links_to_check[@]}"

check_ownership "/usr/lib/dbus-1.0/dbus-daemon-launch-helper"
check_ownership "/var/log/ntpsec"

directories_to_check=(
  "/Applications"
  "/boot"
  "/kboot"
  "/etc/runlevels/boot"
  "/etc/runlevels/default"
  "/etc/runlevels/nonetwork"
  "/etc/runlevels/off"
  "/etc/runlevels/recovery"
  "/etc/runlevels/shutdown"
  "/etc/runlevels/sysinit"
  "/etc/runlevels/async"
  "/etc/skel/Desktop/Documentation"
  "/etc/sddm.conf.d"
  "/etc/udev/rules.d"
  "/System"
  "/System/Devices"
  "/System/Boot"
  "/System/Binaries"
  "/System/Binaries/Administrative"
  "/System/Binaries/Standard"
  "/System/Binaries/Optional"
  "/System/Filesystems/External"
  "/System/Filesystems/Internal"
  "/System/Libraries"
  "/System/Shareable"
  "/System/Variable"
  "/Users"
)

check_directories "${directories_to_check[@]}"

check_file_contents "/etc/sddm.conf.d/kde_settings.conf"
check_file_contents "/etc/NetworkManager/NetworkManager.conf"
check_file_contents "/etc/resolv.conf"
# check_file_contents "/etc/rc.conf"
# check_file_contents "/usr/share/initramfs-tools/scripts/casper"
check_file_contents "/etc/elogind/logind.conf"
check_file_contents "/etc/elogind/sleep.conf"
check_file_contents "/etc/elogind/sleep.conf.d/10-elogind.conf"

check_initramfs_size
