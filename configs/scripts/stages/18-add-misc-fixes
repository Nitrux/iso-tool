#!/usr/bin/env bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2023-2024> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                              #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################

set -eu


# -- Function to create symlinks.

create_symlink() {
    local source="$1"
    local destination="$2"

    ln -svf "$source" "$destination"
}


# -- Function to download Appimage files.

user_agent="BrightSign/8.2.55.5 (XT1144) Mozilla/5.0 (X11; Linux aarch64) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.12.3 Chrome/69.0.3497.128 Safari/537.36"

download_appimage() {
    local name="$1"
    local url="$2"
    local destination="/Applications/$name"

    axel -a -q -k -U "$user_agent" -n 8 "$url" -o "$destination"
    chmod +x "$destination"
}


# -- Add gpu modules to load at boot time.

printf '%s\n' amdgpu i915 >> /etc/modules-load.d/gpu-modules-boot-time.conf


# -- Add other modules to load at boot time.

printf '%s\n' fuse exfat loop >> /etc/modules-load.d/additional-modules-boot-time.conf


# -- Add Hyper-V modules to load at boot time.

printf '%s\n' hv_utils hv_vmbus hv_storvsc hv_blkvsc hv_netvsc >> /etc/modules-load.d/hyperv-modules-boot-time.conf


# -- Remove unwanted kernel and initrd links from /boot and /.

rm -f /boot/{vmlinuz,initrd.img,vmlinuz.old,initrd.img.old} \
      /{vmlinuz.old,initrd.img.old} 2>/dev/null || true


# -- Ensure the links in / point to the files in /boot.

boot_dir="/boot"
vmlinuz_pattern="vmlinuz-*liquorix-*"
initrd_pattern="initrd.img-*liquorix-*"

vmlinuz_file=$(find "$boot_dir" -maxdepth 1 -type f -name "$vmlinuz_pattern" | head -1)
initrd_file=$(find "$boot_dir" -maxdepth 1 -type f -name "$initrd_pattern" | head -1)

if [ -n "$vmlinuz_file" ]; then
    echo "Creating/updating symlink for /vmlinuz"
    create_symlink "$vmlinuz_file" "/vmlinuz"
else
    echo "Error: No matching vmlinuz file found in $boot_dir."
fi

if [ -n "$initrd_file" ]; then
    echo "Creating/updating symlink for /initrd.img"
    create_symlink "$initrd_file" "/initrd.img"
else
    echo "Error: No matching initrd.img file found in $boot_dir."
fi


# -- Create necessary directories to put files for kboot.

mkdir -p /kboot/{debian,mainline,liquorix}


# -- Move and create soft links for liquorix kernel files.

for file in /boot/vmlinuz-*liquorix-amd64; do
    create_symlink "$file" "/kboot/liquorix/vmlinuz"
done

for file in /boot/initrd.img-*liquorix-amd64; do
    create_symlink "$file" "/kboot/liquorix/initrd.img"
done


# -- Add Flathub.

flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo


# -- Create symlinks for MauiKit.

MAUIKIT_VERSION="3.1.0"

create_symlink "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauikit/controls/libMauiKit3.so.$MAUIKIT_VERSION" "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauikit/controls/libMauiKit3.so"
create_symlink "/usr/lib/x86_64-linux-gnu/libMauiKit3.so.$MAUIKIT_VERSION" "/usr/lib/x86_64-linux-gnu/libMauiKit3.so"


# -- Create symlinks for MauiKit FileBrowsing.

create_symlink "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauikit/filebrowsing/libMauiKitFileBrowsing3.so.$MAUIKIT_VERSION" "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauikit/filebrowsing/libMauiKitFileBrowsing3.so"
create_symlink "/usr/lib/x86_64-linux-gnu/libMauiKitFileBrowsing3.so.$MAUIKIT_VERSION" "/usr/lib/x86_64-linux-gnu/libMauiKitFileBrowsing3.so"


# -- Create symlinks for MauiKit TextEditor.

create_symlink "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauikit/texteditor/libMauiKitTextEditor3.so.$MAUIKIT_VERSION" "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauikit/texteditor/libMauiKitTextEditor3.so"
create_symlink "/usr/lib/x86_64-linux-gnu/libMauiKitTextEditor3.so.$MAUIKIT_VERSION" "/usr/lib/x86_64-linux-gnu/libMauiKitTextEditor3.so"


# -- Create symlinks for MauiKit ImageTools.

create_symlink "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauikit/imagetools/libMauiKitImageTools3.so.$MAUIKIT_VERSION" "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauikit/imagetools/libMauiKitImageTools3.so"
create_symlink "/usr/lib/x86_64-linux-gnu/libMauiKitImageTools3.so.$MAUIKIT_VERSION" "/usr/lib/x86_64-linux-gnu/libMauiKitImageTools3.so"


# -- Create symlinks for MauiKit Accounts.

create_symlink "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauikit/accounts/libMauiKitAccounts3.so.$MAUIKIT_VERSION" "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauikit/accounts/libMauiKitAccounts3.so"
create_symlink "/usr/lib/x86_64-linux-gnu/libMauiKitAccounts3.so.$MAUIKIT_VERSION" "/usr/lib/x86_64-linux-gnu/libMauiKitAccounts3.so"


# -- Create symlinks for MauiKit Documents.

create_symlink "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauikit/documents/libMauiKitDocuments3.so.$MAUIKIT_VERSION" "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauikit/documents/libMauiKitDocuments3.so"
create_symlink "/usr/lib/x86_64-linux-gnu/libMauiKitDocuments3.so.$MAUIKIT_VERSION" "/usr/lib/x86_64-linux-gnu/libMauiKitDocuments3.so"


# -- Create symlinks for MauiKit Calendar.

# create_symlink "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauikit/calendar/libMauiKitCalendar3.so.$MAUIKIT_VERSION" "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauikit/calendar/libMauiKitCalendar3.so"


# -- Create symlinks for MauiKit Terminal.

create_symlink "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauikit/terminal/libMauiKitTerminal3.so.$MAUIKIT_VERSION" "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauikit/terminal/libMauiKitTerminal3.so"
create_symlink "/usr/lib/x86_64-linux-gnu/libMauiKitTerminal3.so.$MAUIKIT_VERSION" "/usr/lib/x86_64-linux-gnu/libMauiKitTerminal3.so"


# -- Create symlinks for Maui Core Libraries 0.6.0.

# create_symlink "/usr/lib/x86_64-linux-gnu/libMauiCoreAudio.so.0.6.0" "/usr/lib/x86_64-linux-gnu/libMauiCoreAudio.so.0"
# create_symlink "/usr/lib/x86_64-linux-gnu/libMauiCoreAudio.so.0.6.0" "/usr/lib/x86_64-linux-gnu/libMauiCoreAudio.so"
# create_symlink "/usr/lib/x86_64-linux-gnu/libMauiCoreNotifications.so.0.6.0" "/usr/lib/x86_64-linux-gnu/libMauiCoreNotifications.so.0"
# create_symlink "/usr/lib/x86_64-linux-gnu/libMauiCoreNotifications.so.0.6.0" "/usr/lib/x86_64-linux-gnu/libMauiCoreNotifications.so"
# create_symlink "/usr/lib/x86_64-linux-gnu/libMauiCorePower.so.0.6.0" "/usr/lib/x86_64-linux-gnu/libMauiCorePower.so.0"
# create_symlink "/usr/lib/x86_64-linux-gnu/libMauiCorePower.so.0.6.0" "/usr/lib/x86_64-linux-gnu/libMauiCorePower.so"
# create_symlink "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauicore/audio/libMauiCoreAudio.so.0.6.0" "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauicore/audio/libMauiCoreAudio.so.0"
# create_symlink "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauicore/audio/libMauiCoreAudio.so.0.6.0" "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauicore/audio/libMauiCoreAudio.so"
# create_symlink "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauicore/notifications/libMauiCoreNotifications.so.0.6.0" "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauicore/notifications/libMauiCoreNotifications.so.0"
# create_symlink "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauicore/notifications/libMauiCoreNotifications.so.0.6.0" "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauicore/notifications/libMauiCoreNotifications.so"
# create_symlink "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauicore/power/libMauiCorePower.so.0.6.0" "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauicore/power/libMauiCorePower.so.0"
# create_symlink "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauicore/power/libMauiCorePower.so.0.6.0" "/usr/lib/x86_64-linux-gnu/qt5/qml/org/mauicore/power/libMauiCorePower.so"


# -- Also link the library files for cask to launch because maui-shell and cask-server used Jammy for compilation, and the frameworks used Debian.
# -- KDE PIM libraries were renamed to different SO names because of course they were. Update the links on every new KF5 release.

# KDEPIM_LIB="5.24.5"
# KF5_LIB="5.114.0"

# create_symlink /usr/lib/x86_64-linux-gnu/libKPim5EventViews.so.$KDEPIM_LIB /usr/lib/x86_64-linux-gnu/libKF5EventViews.so.5abi1
# create_symlink /usr/lib/x86_64-linux-gnu/libKPim5CalendarSupport.so.$KDEPIM_LIB /usr/lib/x86_64-linux-gnu/libKF5CalendarSupport.so.5abi1
# create_symlink /usr/lib/x86_64-linux-gnu/libKPim5AkonadiCalendar.so.$KDEPIM_LIB /usr/lib/x86_64-linux-gnu/libKF5AkonadiCalendar.so.5abi1
# create_symlink /usr/lib/x86_64-linux-gnu/libKPim5AkonadiWidgets.so.$KDEPIM_LIB /usr/lib/x86_64-linux-gnu/libKF5AkonadiWidgets.so.5abi1
# create_symlink /usr/lib/x86_64-linux-gnu/libKPim5AkonadiCore.so.$KDEPIM_LIB /usr/lib/x86_64-linux-gnu/libKF5AkonadiCore.so.5abi2
# create_symlink /usr/lib/x86_64-linux-gnu/libKF5CalendarCore.so.$KF5_LIB /usr/lib/x86_64-linux-gnu/libKF5CalendarCore.so.5abi2


# -- Add link for applet window buttons.
# -- NOTE: Update the link on every new release of Plasma.

PLASMA_LIB="5.27.11"

create_symlink /usr/lib/x86_64-linux-gnu/libkdecorations2private.so.$PLASMA_LIB /usr/lib/x86_64-linux-gnu/libkdecorations2private.so.9


# -- Move APT and dpkg out of the way, out of the way, move b...
# -- Use undebianize from Calamares to delete these files from the root.

mv /usr/bin/apt /opt/1
mv /usr/bin/apt-get /opt/2
mv /usr/bin/dpkg /opt/3

chmod -x /opt/{1,2,3}


# -- Add link for libappimage1.0.

create_symlink /usr/lib/x86_64-linux-gnu/libappimage.so.1.0.3.abi1 /usr/lib/x86_64-linux-gnu/libappimage.so.1.0


# -- Enable ufw by default.
# -- Add rules for ports so Waydroid to access the Internet.
# -- Add rules for KDE Connect.

ufw enable
ufw allow 53
ufw allow 67
ufw default allow FORWARD
ufw allow 1714:1764/udp
ufw allow 1714:1764/tcp


# -- Force SDDM to use Wayland session.

mv /usr/share/xsessions/plasma.desktop /usr/share/xsessions/orig.plasma.desktop.bak


# -- Enable SELinux and set enforcing mode.

# selinux-activate
# selinux-config-enforcing


# -- Edit 0install launcher.

sed -i 's+Icon=zeroinstall+Icon=muon+g' /usr/share/applications/0install.desktop
sed -i 's+Categories=Utility;Settings;PackageManager;GTK;+Categories=System;PackageManager;GTK;+g' /usr/share/applications/0install.desktop


# -- Check if the root account is disabled, if not, disable it by locking it.

if [[ $(passwd -S root | awk '{print $2}') == "L" ]]; then
   echo "Root account is already disabled"
else
   passwd -l root
   echo "Root account has been disabled"
fi


# -- Replace /usr/lib/grub/grub-sort-version with a version that doesn't use apt.pkg so it can generate a usable boot menu.

$(which cp) /configs/files/grub_files/grub-sort-version /usr/lib/grub/grub-sort-version


# -- Create directories for aesthethic FHS.

BASE_DIR="/System"

declare -a DIRS=(
    "${BASE_DIR}/Boot"
    "${BASE_DIR}/Binaries/Administrative"
    "${BASE_DIR}/Binaries/Standard"
    "${BASE_DIR}/Binaries/Optional"
    "${BASE_DIR}/Configuration"
    "${BASE_DIR}/Devices"
    "${BASE_DIR}/Filesystems/External"
    "${BASE_DIR}/Filesystems/Internal"
    "${BASE_DIR}/Libraries"
    "${BASE_DIR}/Shareable"
    "${BASE_DIR}/Variable"
    "/Users"
)

for dir in "${DIRS[@]}"; do
    echo "Creating directory: $dir"
    mkdir -p "$dir" || echo "Failed to create $dir"
done


# -- Hide original FHS directories.

$(which cp) /configs/files/other/hidden /.hidden


# -- Replace update-grub with our version that doesn't break OUR stuff.

$(which cp) /configs/scripts/others/update-grub /usr/sbin/update-grub


# -- Replace this line in mkinitramfs so it shuts up about dpkg.

sed -i "s+DPKG_ARCH=\$(dpkg --print-architecture)+DPKG_ARCH=\$(uname -m | sed \"s/x86_64/amd64/\")+g" /usr/sbin/mkinitramfs


# -- Replace user-setup-apply so that it shuts up about dpkg.

$(which cp) /configs/scripts/others/user-setup-apply /usr/lib/user-setup/user-setup-apply


# -- Change path where NetworkManager saves wireless connections.

echo -e "\n[keyfile]\npath=/var/lib/NetworkManager" | tee -a /etc/NetworkManager/NetworkManager.conf


# -- Create directory for os-prober.

mkdir -p /var/lib/os-prober/mount


# -- Edit NVIDIA X Settings launcher.

sed -i 's+Categories=System;Settings;+Categories=Settings;+g' /usr/share/applications/nvidia-settings.desktop


# -- Edit CoreCtrl launcher.

sed -i 's+Categories=System;Settings;Utility;+Categories=Utility;+g' /usr/share/applications/org.corectrl.CoreCtrl.desktop


# -- Only download NXSC AppImage.

download_appimage "nx-software-center" "https://github.com/Nitrux/nx-software-center/releases/download/latest/nx-software-center-latest-x86_64.AppImage"

DESKTOP_FILE="/usr/share/applications/org.nx.softwarecenter.desktop"

cat << EOF > "$DESKTOP_FILE"
[Desktop Entry]
Name=NX Software Center
Comment=Software store for AppImages
TryExec=/Applications/nx-software-center
Exec=/Applications/nx-software-center %U
Keywords=program;software;repository;package;install;remove;update;apps;applications;appimage;
Terminal=false
Type=Application
GenericName=Software Center
Categories=Qt;KDE;System;
StartupNotify=true
Icon=nx-software-center
MimeType=application/vnd.appimage;application/x-executable;

SingleMainWindow=true

[Desktop Action FirejailProfile]
Exec=firejail --env=DESKTOPINTEGRATION=appimaged --private --appimage /Applications/nx-software-center
Name=Run without sandbox profile
TryExec=firejail
EOF


# -- Create links for dbab lists in /etc/NetworkManager/dnsmasq.d.

ln -sv /etc/dnsmasq.d/dbab-map.adblock.conf /etc/NetworkManager/dnsmasq.d/dbab-map.adblock.conf
ln -sv /etc/dnsmasq.d/dbab-map.trashsites.conf /etc/NetworkManager/dnsmasq.d/dbab-map.trashsites.conf


# -- Disable AppArmor profile for bubblewrap that breaks Flatpak, see https://bugs.launchpad.net/ubuntu/+source/apparmor/+bug/2072811

ln -s /etc/apparmor.d/bwrap-userns-restrict /etc/apparmor.d/disable/


# -- Disable DrKonqi as we do not include debug symbols and it's useless otherwise.

chmod a-x /usr/lib/x86_64-linux-gnu/libexec/drkonqi 


# -- Add tutorials to /etc/skel so they're added to the Desktop directory.

ORIGINAL_DIR=$(pwd)

TEMP_DIR1=$(mktemp -d)
git clone --depth=1 https://github.com/Nitrux/storage.git "$TEMP_DIR1"
cd "$TEMP_DIR1"
cp -R Other/Documentation /etc/skel/Desktop
cd "$ORIGINAL_DIR"


# -- Add nvidia_oc binary to overclock NVIDIA GPUs on Wayland.

FILE_URL="https://github.com/Dreaming-Codes/nvidia_oc/releases/download/0.1.11/nvidia_oc"
DEST_DIR="/usr/bin"
DEST_FILE="$DEST_DIR/nvidia-oc"
if curl -L -o "$DEST_FILE" "$FILE_URL"; then
    chmod +x "$DEST_FILE"
else
    exit 1
fi


# -- Add install scripts here.

DEST_DIR="/usr/bin"
LINKER_URL="https://raw.githubusercontent.com/Nitrux/storage/master/Scripts/linker"
UNDEBIANIZE_URL="https://raw.githubusercontent.com/Nitrux/storage/master/Scripts/undebianize"

wget -P "$DEST_DIR" "$LINKER_URL"
wget -P "$DEST_DIR" "$UNDEBIANIZE_URL"

chmod +x "$DEST_DIR/linker"
chmod +x "$DEST_DIR/undebianize"


# -- Edit Kvantum Manager launcher.

sed -i 's+Categories=Qt;Utility;Settings;DesktopSettings;LXQt;X-XFCE-SettingsDialog;X-XFCE-PersonalSettings;X-GNOME-PersonalSettings;+Categories=Qt;Settings;DesktopSettings;LXQt;X-XFCE-SettingsDialog;X-XFCE-PersonalSettings;X-GNOME-PersonalSettings;+g' /usr/share/applications/kvantummanager.desktop
